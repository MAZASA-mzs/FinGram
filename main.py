import asyncio
import sqlite3
import re
import os
import pandas as pd
from datetime import datetime, timedelta
from typing import Optional, Set

# --- Aiogram (–ë–æ—Ç) ---
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, BaseFilter
from aiogram.types import Message, Document, CallbackQuery, FSInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
# ‚ö†Ô∏è –í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ –≤–∞—à —Ç–æ–∫–µ–Ω. –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ - –∏–∑ env.
BOT_TOKEN = "YOUR_TELEGRAM_BOT_TOKEN_HERE"
DB_NAME = "fingram_mvp.db"
# ‚ö†Ô∏è –î–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞ –≤–∞—à Telegram User ID –¥–ª—è –¥–æ—Å—Ç—É–ø–∞
ALLOWED_USERS_IDS: Set[int] = {123456789}

# --- –§–∏–ª—å—Ç—Ä –¥–æ—Å—Ç—É–ø–∞ (White-list) ---
class IsAllowed(BaseFilter):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–∫–µ ALLOWED_USERS_IDS.
    """
    async def __call__(self, message: Message) -> bool:
        if message.from_user.id not in ALLOWED_USERS_IDS:
            await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –≠—Ç–æ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –±–æ—Ç.")
            return False
        return True

# --- –ú–æ–¥—É–ª—å 1: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (SQLite) ---
def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü—ã."""
    with sqlite3.connect(DB_NAME) as conn:
        cursor = conn.cursor()
        # –¢–∞–±–ª–∏—Ü–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS categories (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL UNIQUE
        )
        """)
        # –¢–∞–±–ª–∏—Ü–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (–∏–∑ .xlsx)
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS transactions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            trans_date TEXT NOT NULL,
            amount REAL NOT NULL,
            description TEXT,
            is_matched BOOLEAN DEFAULT 0,
            category_id INTEGER,
            user_note TEXT,
            FOREIGN KEY (category_id) REFERENCES categories (id)
        )
        """)
        # –î–æ–±–∞–≤–∏–º –ø–∞—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Ç–µ—Å—Ç–∞
        try:
            cursor.executemany("INSERT INTO categories (name) VALUES (?)",
                               [('–ü—Ä–æ–¥—É–∫—Ç—ã',), ('–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç',), ('–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è',), ('–î—Ä—É–≥–æ–µ',)])
        except sqlite3.IntegrityError:
            pass # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        conn.commit()

# --- –ú–æ–¥—É–ª—å 2: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ (–ë–æ—Ç –∏ API) ---
async def db_add_category(name: str) -> bool:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –ë–î."""
    with sqlite3.connect(DB_NAME) as conn:
        try:
            conn.execute("INSERT INTO categories (name) VALUES (?)", (name,))
            conn.commit()
            return True
        except sqlite3.IntegrityError:
            return False # –¢–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ –µ—Å—Ç—å

async def db_get_categories() -> list:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ –ë–î."""
    with sqlite3.connect(DB_NAME) as conn:
        cursor = conn.execute("SELECT id, name FROM categories")
        return cursor.fetchall()

# --- –ú–æ–¥—É–ª—å 3: –ü–∞—Ä—Å–µ—Ä .xlsx (openpyxl) ---
async def parse_sber_xlsx(file_path: str) -> (int, int):
    """
    –ü–∞—Ä—Å–∏—Ç .xlsx —Ñ–∞–π–ª (—Ñ–æ—Ä–º–∞—Ç –°–±–µ—Ä–±–∞–Ω–∫–∞).
    [cite: 36]
    ‚ö†Ô∏è –í–ê–ñ–ù–û: –ú—ã –¥–µ–ª–∞–µ–º –¥–æ–ø—É—â–µ–Ω–∏–µ –æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Ñ–∞–π–ª–∞.
    –ù–∞–ø—Ä–∏–º–µ—Ä:
    - –î–∞—Ç–∞ –≤ –∫–æ–ª–æ–Ω–∫–µ A (–Ω–∞—á–∏–Ω–∞—è —Å 9 —Å—Ç—Ä–æ–∫–∏)
    - –û–ø–∏—Å–∞–Ω–∏–µ –≤ –∫–æ–ª–æ–Ω–∫–µ C
    - –°—É–º–º–∞ (—Ä–∞—Å—Ö–æ–¥) –≤ –∫–æ–ª–æ–Ω–∫–µ F
    –í–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å `col_idx` –ø–æ–¥ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª.
    """
    from openpyxl import load_workbook

    # ‚ö†Ô∏è –ê–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ —ç—Ç–∏ –∏–Ω–¥–µ–∫—Å—ã (A=1, B=2, C=3...)
    DATE_COL = 1
    DESC_COL = 3
    AMOUNT_COL = 6 # –†–∞—Å—Ö–æ–¥—ã
    START_ROW = 9  # –û–±—ã—á–Ω–æ –¥–∞–Ω–Ω—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è –Ω–µ —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏

    transactions_to_add = []
    processed_count = 0
    skipped_count = 0

    try:
        workbook = load_workbook(filename=file_path, read_only=True)
        sheet = workbook.active

        for row in sheet.iter_rows(min_row=START_ROW, values_only=True):
            if not row[DATE_COL] or not row[AMOUNT_COL]:
                skipped_count += 1
                continue

            try:
                # '28.09.2025' -> datetime object
                trans_date_str = str(row[DATE_COL]).split(" ")[0]
                trans_date = datetime.strptime(trans_date_str, '%d.%m.%Y').isoformat()

                # '1 500,00' -> -1500.0 (–°–±–µ—Ä–±–∞–Ω–∫ —Å—Ç–∞–≤–∏—Ç —Ä–∞—Å—Ö–æ–¥—ã —Å –º–∏–Ω—É—Å–æ–º)
                amount_str = str(row[AMOUNT_COL]).replace(' ', '').replace(',', '.')
                amount = float(amount_str)

                # –ù–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç —Ç–æ–ª—å–∫–æ —Ä–∞—Å—Ö–æ–¥—ã (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
                if amount < 0:
                    description = str(row[DESC_COL] or "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è")
                    transactions_to_add.append((trans_date, abs(amount), description))
                    processed_count += 1
                else:
                    skipped_count += 1 # –≠—Ç–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º

            except (ValueError, TypeError) as e:
                print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏: {e}")
                skipped_count += 1

        # –ó–∞–ø–∏—Å—å –≤ –ë–î
        if transactions_to_add:
            with sqlite3.connect(DB_NAME) as conn:
                conn.executemany(
                    "INSERT INTO transactions (trans_date, amount, description) VALUES (?, ?, ?)",
                    transactions_to_add
                )
                conn.commit()

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è .xlsx: {e}")
        return 0, 0
    finally:
        os.remove(file_path) # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª

    return processed_count, skipped_count

# --- –ú–æ–¥—É–ª—å 4: Matching Engine (–ì–∏–±—Ä–∏–¥–Ω—ã–π) ---

def parse_user_note(text: str) -> Optional[tuple[float, str]]:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—É–º–º—É –∏ —Ç–µ–∫—Å—Ç –∏–∑ –∑–∞–º–µ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    "–¢–∞–∫—Å–∏ 500" -> (500.0, "–¢–∞–∫—Å–∏")
    "–ö—É–ø–∏–ª –ø—Ä–æ–¥—É–∫—Ç—ã 1250.50" -> (1250.50, "–ö—É–ø–∏–ª –ø—Ä–æ–¥—É–∫—Ç—ã")
    """
    # –ò—â–µ—Ç —á–∏—Å–ª–æ (—Ü–µ–ª–æ–µ –∏–ª–∏ —Å —Ç–æ—á–∫–æ–π/–∑–∞–ø—è—Ç–æ–π) –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏
    match = re.search(r'(\d+([.,]\d{1,2})?)$', text)
    if not match:
        # –ò—â–µ—Ç —á–∏—Å–ª–æ –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏
        match = re.search(r'^(\d+([.,]\d{1,2})?)\b', text)

    if match:
        amount_str = match.group(1).replace(',', '.')
        amount = float(amount_str)
        # –¢–µ–∫—Å—Ç - —ç—Ç–æ –≤—Å—ë, —á—Ç–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—É–º–º–æ–π
        description = text.replace(match.group(0), '').strip()
        return amount, description or "–ó–∞–º–µ—Ç–∫–∞"

    return None

async def db_find_unmatched(amount: float, days_window: int = 1) -> Optional[dict]:
    """
    –ò—â–µ—Ç –≤ –ë–î –Ω–µ—Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø–æ —Å—É–º–º–µ –∏ –≤—Ä–µ–º–µ–Ω–∏.
    """
    time_limit = (datetime.now() - timedelta(days=days_window)).isoformat()

    with sqlite3.connect(DB_NAME) as conn:
        conn.row_factory = sqlite3.Row # –í–æ–∑–≤—Ä–∞—â–∞—Ç—å –∫–∞–∫ dict
        cursor = conn.cursor()
        cursor.execute(
            """
            SELECT id, trans_date, description, amount 
            FROM transactions
            WHERE is_matched = 0 AND amount = ? AND trans_date >= ?
            ORDER BY trans_date DESC
            LIMIT 1
            """,
            (amount, time_limit)
        )
        result = cursor.fetchone()
        return dict(result) if result else None

async def db_match_transaction(trans_id: int, category_id: int, user_note: str):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é, –ø–æ–º–µ—á–∞—è –µ–µ –∫–∞–∫ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é."""
    with sqlite3.connect(DB_NAME) as conn:
        conn.execute(
            """
            UPDATE transactions
            SET is_matched = 1, category_id = ?, user_note = ?
            WHERE id = ?
            """,
            (category_id, user_note, trans_id)
        )
        conn.commit()

# --- –ú–æ–¥—É–ª—å 5: –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –û—Ç—á—ë—Ç–æ–≤ (pandas -> .csv)  ---
async def generate_csv_report() -> Optional[str]:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç CSV-–æ—Ç—á–µ—Ç –ø–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º[cite: 41].
    """
    try:
        with sqlite3.connect(DB_NAME) as conn:
            query = """
            SELECT 
                t.trans_date,
                t.amount,
                c.name as category,
                t.user_note,
                t.description as bank_description
            FROM transactions t
            JOIN categories c ON t.category_id = c.id
            WHERE t.is_matched = 1
            ORDER BY t.trans_date
            """
            df = pd.read_sql_query(query, conn)

        if df.empty:
            return None

        report_path = "report_fingram.csv"
        # 'utf-8-sig' –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Excel
        df.to_csv(report_path, index=False, encoding='utf-8-sig')
        return report_path

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
        return None

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–æ—Ç–∞ –∏ –î–∏—Å–ø–µ—Ç—á–µ—Ä–∞ ---
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# --- –•—ç–Ω–¥–ª–µ—Ä—ã (–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥) ---

@dp.message(IsAllowed(), Command("start"))
async def cmd_start(message: Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø FinGram - –≤–∞—à –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫.\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ .xlsx –≤—ã–ø–∏—Å–∫—É –∏–∑ –±–∞–Ω–∫–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.\n"
		"–ó–∞—Ç–µ–º –ø—Ä–æ—Å—Ç–æ –ø–∏—à–∏—Ç–µ –º–Ω–µ —Å–≤–æ–∏ —Ç—Ä–∞—Ç—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: `–¢–∞–∫—Å–∏ 500`\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/upload - –ó–∞–≥—Ä—É–∑–∏—Ç—å .xlsx –≤—ã–ø–∏—Å–∫—É\n"
        "/report - –ü–æ–ª—É—á–∏—Ç—å .csv –æ—Ç—á–µ—Ç [cite: 40]\n"
        "/add_category <–ù–∞–∑–≤–∞–Ω–∏–µ> - –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é\n"
        "/list_categories - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
    )

# --- –ë–ª–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ ---
@dp.message(IsAllowed(), Command("add_category"))
async def cmd_add_category(message: Message):
    category_name = message.text.replace("/add_category", "").strip()
    if not category_name:
        await message.answer("–û—à–∏–±–∫–∞. –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n`/add_category –ï–¥–∞`")
        return

    if await db_add_category(category_name):
        await message.answer(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
    else:
        await message.answer(f"‚ö†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

@dp.message(IsAllowed(), Command("list_categories"))
async def cmd_list_categories(message: Message):
    categories = await db_get_categories()
    if not categories:
        await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/add_category`")
        return

    text = "–°–ø–∏c–æ–∫ –≤–∞—à–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π:\n" + "\n".join([f"‚Ä¢ {name}" for id, name in categories])
    await message.answer(text)

# --- –ë–ª–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏ .xlsx ---
@dp.message(IsAllowed(), Command("upload"))
async def cmd_upload_prompt(message: Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à .xlsx —Ñ–∞–π–ª[cite: 36].")

@dp.message(IsAllowed(), F.document)
async def handle_document(message: Message, bot: Bot):
    document = message.document
    if not document.file_name.endswith('.xlsx'):
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ `.xlsx`.")
        return

    await message.answer(f"‚è≥ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–∞ `{document.file_name}`...")

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    file_info = await bot.get_file(document.file_id)
    file_path = f"temp_{document.file_id}.xlsx"
    await bot.download_file(file_info.file_path, destination=file_path)

    # –ü–∞—Ä—Å–∏–º [cite: 37]
    processed, skipped = await parse_sber_xlsx(file_path)

    if processed == 0 and skipped == 0:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç. [cite: 50]")
    else:
        await message.answer(
            f"‚úÖ –§–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω.\n"
            f"‚Ä¢ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (—Ä–∞—Å—Ö–æ–¥–æ–≤): {processed}\n"
            f"‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω–æ (–ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è/–æ—à–∏–±–∫–∏): {skipped}"
        )

# --- –ë–ª–æ–∫ Matching Engine (—Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è) ---
@dp.message(IsAllowed(), F.text)
async def handle_user_note(message: Message):
    parsed_data = parse_user_note(message.text)

    if not parsed_data:
        await message.answer("–ù–µ –º–æ–≥—É —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å—É–º–º—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: `–¢–µ–∫—Å—Ç –°—É–º–º–∞`, –Ω–∞–ø—Ä–∏–º–µ—Ä: `–¢–∞–∫—Å–∏ 500`")
        return

    amount, description = parsed_data

    # –ò—â–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    found_trans = await db_find_unmatched(amount)

    if not found_trans:
        await message.answer(f"–ó–∞–º–µ—Ç–∫—É '`{message.text}`' —Å–æ—Ö—Ä–∞–Ω–∏–ª, –Ω–æ –Ω–µ –Ω–∞—à–µ–ª –ø–æ–¥—Ö–æ–¥—è—â–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–∞ {amount} —Ä—É–±. –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24—á.")
        # TODO: –í –±—É–¥—É—â–µ–º - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É user_notes
        return

    # –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞! –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    categories = await db_get_categories()
    if not categories:
        await message.answer("–ù–∞—à–µ–ª —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é, –Ω–æ —É –≤–∞—Å –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –î–æ–±–∞–≤—å—Ç–µ –∏—Ö: `/add_category <–ù–∞–∑–≤–∞–Ω–∏–µ>`")
        return

    builder = InlineKeyboardBuilder()
    for cat_id, cat_name in categories:
        # –§–æ—Ä–º–∏—Ä—É–µ–º callback_data: "match_–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—èID_–ö–∞—Ç–µ–≥–æ—Ä–∏—èID_–¢–µ–∫—Å—Ç–ó–∞–º–µ—Ç–∫–∏"
        # –¢–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏ –∫–æ–¥–∏—Ä—É–µ–º, —Ç.–∫. –æ–Ω –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–Ω—ã–º (–Ω–æ –¥–ª—è MVP OK)
        callback_data = f"match_{found_trans['id']}_{cat_id}_{message.text[:30]}"
        builder.button(text=cat_name, callback_data=callback_data)

    builder.adjust(2) # –ü–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥

    await message.answer(
        f"–ù–∞–π–¥–µ–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è:\n"
        f"‚Ä¢ *{found_trans['description']}* –Ω–∞ *{found_trans['amount']} —Ä—É–±.*\n\n"
        f"–ö –∫–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–Ω–µ—Å—Ç–∏ –∑–∞–º–µ—Ç–∫—É '`{message.text}`'?",
        reply_markup=builder.as_markup(),
        parse_mode="Markdown"
    )

# --- –ë–ª–æ–∫ Callback (–Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫) ---
@dp.callback_query(IsAllowed(), F.data.startswith("match_"))
async def cq_handle_match(callback: CallbackQuery):
    # "match_–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—èID_–ö–∞—Ç–µ–≥–æ—Ä–∏—èID_–¢–µ–∫—Å—Ç–ó–∞–º–µ—Ç–∫–∏"
    try:
        _, trans_id, cat_id, user_note = callback.data.split("_", 3)
        trans_id = int(trans_id)
        cat_id = int(cat_id)
    except ValueError:
        await callback.answer("–û—à–∏–±–∫–∞! –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback.", show_alert=True)
        return

    # –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º –≤ –ë–î
    await db_match_transaction(trans_id, cat_id, user_note)

    # –û—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
    category_name = [c[1] for c in await db_get_categories() if c[0] == cat_id][0]

    await callback.message.edit_text(
        f"‚úÖ *–°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ:*\n"
        f"–ó–∞–º–µ—Ç–∫–∞: `{user_note}`\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: *{category_name}*",
        parse_mode="Markdown",
        reply_markup=None # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    )
    await callback.answer(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ '{category_name}'")


# --- –ë–ª–æ–∫ –æ—Ç—á–µ—Ç–æ–≤ [cite: 40] ---
@dp.message(IsAllowed(), Command("report"))
async def cmd_report(message: Message):
    await message.answer("‚è≥ –ì–æ—Ç–æ–≤–ª—é .csv –æ—Ç—á–µ—Ç...")

    report_file_path = await generate_csv_report()

    if not report_file_path:
        await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞. –°–Ω–∞—á–∞–ª–∞ —Å–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª [cite: 41]
    csv_file = FSInputFile(report_file_path)
    await message.answer_document(csv_file, caption="–í–∞—à .csv –æ—Ç—á–µ—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º.")

    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –æ—Ç—á–µ—Ç–∞
    os.remove(report_file_path)


# --- –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ ---
async def main():
    print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    init_database()

    print("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    # 'IsAllowed()' –≤ 'dp.message' –∏ 'dp.callback_query' –ø—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä –∫–æ –≤—Å–µ–º —Ö—ç–Ω–¥–ª–µ—Ä–∞–º
    dp.message.filter(IsAllowed())
    dp.callback_query.filter(IsAllowed())

    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
    if BOT_TOKEN == "YOUR_TELEGRAM_BOT_TOKEN_HERE":
        print("!!! –û–®–ò–ë–ö–ê !!!")
        print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π BOT_TOKEN –Ω–∞ —Å—Ç—Ä–æ–∫–µ 20.")
    elif not ALLOWED_USERS_IDS or ALLOWED_USERS_IDS == {123456789}:
         print("!!! –í–ù–ò–ú–ê–ù–ò–ï !!!")
         print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à Telegram User ID –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π ALLOWED_USERS_IDS –Ω–∞ —Å—Ç—Ä–æ–∫–µ 23.")
         print("–í—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å —Å–≤–æ–π ID —É –±–æ—Ç–∞ @userinfobot")
         print("–ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
         asyncio.run(main())
    else:
        asyncio.run(main())